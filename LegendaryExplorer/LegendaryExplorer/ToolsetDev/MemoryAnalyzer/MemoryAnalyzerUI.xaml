<bases:TrackingNotifyPropertyChangedWindowBase
       x:Class="LegendaryExplorer.ToolsetDev.MemoryAnalyzer.MemoryAnalyzerUI"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:misc="clr-namespace:LegendaryExplorerCore.Misc;assembly=LegendaryExplorerCore"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:bases="clr-namespace:LegendaryExplorer.SharedUI.Bases"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        mc:Ignorable="d"
        Closing="MemoryAnalyzer_Closing"
        SizeToContent="Width"
        Title="Legendary Explorer Memory Analyzer" MinHeight="445" Height="440" MinWidth="800" Width="800"
        DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <xctk:BusyIndicator
        IsBusy="{Binding IsBusy}"
        BusyContent="{Binding IsBusyText}">
        <DockPanel LastChildFill="True" Margin="5">
            <DockPanel DockPanel.Dock="Top" Width="800" HorizontalAlignment="Left">
                <TextBlock TextWrapping="Wrap" DockPanel.Dock="Top" Text="This tool is for toolset developers only.&#10;References are tracked and their disposal state is shown. Windows and objects that are no longer in use and are expected to be garbage collected should become garbage collected when clicking 'Force Large GC'. If they do not (after also waiting for a bit), a memory leak is likely. You can trace memory leaks in dotMemory (must be installed already on system)."/>
                <TextBlock Text="Tracked references:" FontWeight="Bold" Margin="0,10,0,0"/>
            </DockPanel>
            <StackPanel DockPanel.Dock="Bottom">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock TextWrapping="Wrap" Text="{Binding CurrentMemoryUsageText}" HorizontalAlignment="Left"/>
                    <TextBlock TextWrapping="Wrap" Text="{Binding LastRefreshText}" Grid.Column="1" HorizontalAlignment="Right"/>
                </Grid>
                <DockPanel>
                    <Button Content="Clear garbage collected references" Padding="5,3,5,3" Margin="0,5,0,5" Click="CleanUpOldRefs_Click" DockPanel.Dock="Left" ToolTip="Clears items in the 'Garbage Collected' state from the list. After 10 seconds, these items will automatically be removed"/>
                    <Button Content="Show package handler open packages"  Margin="5,3" Padding="5,3,5,3" Click="ShowOpenPackages_Click" DockPanel.Dock="Left" VerticalAlignment="Center" ToolTip="Shows the list of Package Handler open packages"/>
                    <Button Content="dotMemory: Take Snapshot"  Margin="0,3" Padding="5,3,5,3" Click="TakeSnapshot_Click" DockPanel.Dock="Left" VerticalAlignment="Center" ToolTip="Generates a memory dump of the process and opens dotMemory to analyze it. Ensure you've installed dotMemory beforehand"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button Content="Force GC" Margin="2,5" Padding="10,3,10,3" Click="ForceGC_Click" ToolTip="Forces a full garbage collection. Due to how .NET works, this doesn't always GC everything, unfortunately"/>
                    </StackPanel>
                </DockPanel>
            </StackPanel>
            <ListBox ItemsSource="{x:Static misc:MemoryAnalyzer.TrackedMemoryObjects}" HorizontalContentAlignment="Stretch" VerticalAlignment="Stretch">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <DockPanel LastChildFill="True" HorizontalAlignment="Stretch" Opacity="{Binding PercentTimeRemaining}">
                            <TextBlock TextWrapping="Wrap" Text="{Binding AllocationTime}" FontStyle="Italic"/>
                            <DockPanel LastChildFill="True" HorizontalAlignment="Stretch" Margin="10,0,0,0">
                                <TextBlock TextWrapping="Wrap" DockPanel.Dock="Left"  Text="{Binding Path=ReferenceName}"/>
                                <TextBlock TextWrapping="Wrap" DockPanel.Dock="Right" TextAlignment="Right" Text="{Binding Path=ReferenceStatus}" FontWeight="Bold">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="FontSize" Value="12"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=IsPackageReference}">
                                                    <Setter Property="Background" Value="Red"/>
                                                    <Setter Property="FontSize" Value="20"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DockPanel>
                        </DockPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <EventSetter Event="MouseDoubleClick" Handler="MAUI_MouseDoubleClick"/>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </DockPanel>
    </xctk:BusyIndicator>

</bases:TrackingNotifyPropertyChangedWindowBase>
